# Auto-generate release notes
# トリガーは GitHub の Publish release ボタン押下

# GitHub Release 名
name-template: 'v$RESOLVED_VERSION'

# GitHub Release に関連付けるタグ名
tag-template: 'v$RESOLVED_VERSION'

# title: リリースノートの "## What Changed" の下の "### " の見出し
# label: PR にこのラベルがついていればこの title にする、の指定
changelog:
  categories:
    - title: 'バグ修正'
      labels:
        - 'bug'
        - 'bugfix'
        - 'fix'
    - title: '文書'
      label:
        - 'documentation'
    - title: '機能追加・改修'
      labels:
        - 'feature'
    - title: 'GitHub Actions'
      label:
        - 'github actions'
    - title: 'リファクタ'
      label:
        - 'refactor'
    - title: 'その他'
      labels:
        - 'other'

# PR の中に major や minor というラベルがついたプルリクエストがあると、バージョン番号の対応したパートがインクリメント
# このタグは Git 上のタグではないことに注意
# 例: 今が v1.2.3 までリリース済み ⇒ major が含まれていれば v2.0.0 に、minor だけなら v1.3.0 に、どちらも含まれていなければ v1.2.4 になる
version-resolver:
  major:
    labels:
      - 'major'
  minor:
    labels:
      - 'minor'
  patch:
    labels:
      - 'patch'
  default: patch

# PR の分類に使用するラベルのつけ忘れ対応機能
# PR のタイトル、本文、ブランチ名、変更されたファイルのパスによって自動的に PR にラベル付与
# autolabeler:
#   # bug
#   - label: bug
#     branch:
#       - '/^fix[/-].+/'
#   # documentation
#   - label: documentation
#     branch:
#       - '/doc(umentation)[/-].+/'
#     files:
#       - '*.md'
#   # enhancement
#   - label: enhancement
#     branch:
#       - '/(enhancement|improve)[/-].+/'
#   # feature
#   - label: feature
#     branch:
#       - '/^feat(ure)?[/-].+/'
#   # refactor
#   - label: refactor
#     branch:
#       - '/^refactor[/-].+/'
#   - label: other
#     branch:
#       - '*'
