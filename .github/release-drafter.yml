# GitHub Release 名
name-template: 'v$RESOLVED_VERSION 🌈'

# GitHub Release に関連付けるタグ名
tag-template: 'v$RESOLVED_VERSION'

# GitHub PR のラベルを参照してリリースノート本文を記載
# title: リリースノートの "## What Changed" の下の "### " の見出し
# label: PR にこのラベルがついていればこの title にする、の指定
categories:
  - title: '🚀 Features'
    labels:
      - 'feature'
      - 'enhancement'
  - title: '🐛 Bug Fixes'
    labels:
      - 'fix'
      - 'bugfix'
      - 'bug'
  - title: '🧰 Maintenance'
    label: 'chore'

change-template: '- $TITLE @$AUTHOR (#$NUMBER)'

change-title-escapes: '\<*_&' # You can add # and @ to disable mentions, and add ` to disable code blocks.

# PR の中に major や minor というラベルがついたプルリクエストがあると、バージョン番号の対応したパートがインクリメント
# このタグは Git 上のタグではないことに注意
# 例: 今が v1.2.3 までリリース済み ⇒ major が含まれていれば v2.0.0 に、minor だけなら v1.3.0 に、どちらも含まれていなければ v1.2.4 になる
version-resolver:
  major:
    labels:
      - 'major'
  minor:
    labels:
      - 'minor'
  patch:
    labels:
      - 'patch'
  default: patch


template: |
  ## Changes

  $CHANGES

# PR の分類に使用するラベルのつけ忘れ対応機能
# PR のタイトル、本文、ブランチ名、変更されたファイルのパスによって自動的に PR にラベル付与
# autolabeler:
#   # bug
#   - label: bug
#     branch:
#       - '/^fix[/-].+/'
#   # documentation
#   - label: documentation
#     branch:
#       - '/doc(umentation)[/-].+/'
#     files:
#       - '*.md'
#   # enhancement
#   - label: enhancement
#     branch:
#       - '/(enhancement|improve)[/-].+/'
#   # feature
#   - label: feature
#     branch:
#       - '/^feat(ure)?[/-].+/'
#   # refactor
#   - label: refactor
#     branch:
#       - '/^refactor[/-].+/'
#   - label: other
#     branch:
#       - '*'
